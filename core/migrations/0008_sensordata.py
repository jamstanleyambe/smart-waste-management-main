# Generated by Django 5.2.5 on 2025-09-03 23:11

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0007_alter_bin_bin_id_alter_bin_fill_level_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_id', models.CharField(help_text='Unique identifier for the sensor device', max_length=50, unique=True)),
                ('bin_id', models.CharField(help_text='Associated bin ID', max_length=50)),
                ('fill_level', models.FloatField(help_text='Current fill level percentage', validators=[django.core.validators.MinValueValidator(0.0, message='Fill level cannot be negative'), django.core.validators.MaxValueValidator(100.0, message='Fill level cannot exceed 100%')])),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90.0, message='Latitude must be between -90 and 90'), django.core.validators.MaxValueValidator(90.0, message='Latitude must be between -90 and 90')])),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180.0, message='Longitude must be between -180 and 180'), django.core.validators.MaxValueValidator(180.0, message='Longitude must be between -180 and 180')])),
                ('organic_percentage', models.FloatField(default=40.0, validators=[django.core.validators.MinValueValidator(0.0, message='Organic percentage cannot be negative'), django.core.validators.MaxValueValidator(100.0, message='Organic percentage cannot exceed 100%')])),
                ('plastic_percentage', models.FloatField(default=35.0, validators=[django.core.validators.MinValueValidator(0.0, message='Plastic percentage cannot be negative'), django.core.validators.MaxValueValidator(100.0, message='Plastic percentage cannot exceed 100%')])),
                ('metal_percentage', models.FloatField(default=25.0, validators=[django.core.validators.MinValueValidator(0.0, message='Metal percentage cannot be negative'), django.core.validators.MaxValueValidator(100.0, message='Metal percentage cannot exceed 100%')])),
                ('sensor_status', models.CharField(choices=[('ONLINE', 'Online'), ('OFFLINE', 'Offline'), ('ERROR', 'Error'), ('MAINTENANCE', 'Maintenance')], default='ONLINE', help_text='Current status of the sensor device', max_length=20)),
                ('battery_level', models.FloatField(blank=True, help_text='Battery level percentage (if available)', null=True, validators=[django.core.validators.MinValueValidator(0.0, message='Battery level cannot be negative'), django.core.validators.MaxValueValidator(100.0, message='Battery level cannot exceed 100%')])),
                ('signal_strength', models.IntegerField(blank=True, help_text='WiFi signal strength in dBm (if available)', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When this reading was received')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last time this record was updated')),
                ('temperature', models.FloatField(blank=True, help_text='Temperature reading in Celsius (if available)', null=True)),
                ('humidity', models.FloatField(blank=True, help_text='Humidity reading in percentage (if available)', null=True)),
            ],
            options={
                'verbose_name': 'Sensor Data',
                'verbose_name_plural': 'Sensor Data',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['sensor_id', 'timestamp'], name='core_sensor_sensor__6b142b_idx'), models.Index(fields=['bin_id', 'timestamp'], name='core_sensor_bin_id_335d52_idx'), models.Index(fields=['timestamp'], name='core_sensor_timesta_5208ac_idx')],
            },
        ),
    ]
